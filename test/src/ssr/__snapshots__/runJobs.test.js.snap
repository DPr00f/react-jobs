exports[`runJobs() should not render a job that is deferred 1`] = `
<ServerProvider
  runJobsExecContext={
    Object {
      "getState": [Function],
      "registerJobState": [Function],
    }
  }>
  <ClientProvider>
    <FooWithJobWithJobID>
      <FooWithJob
        jobInitState={
          Object {
            "completed": false,
            "inProgress": true,
          }
        }
        onJobProcessed={[Function]}>
        <Foo
          job={
            Object {
              "completed": false,
              "error": undefined,
              "inProgress": true,
              "result": undefined,
            }
          }
          jobInitState={
            Object {
              "completed": false,
              "inProgress": true,
            }
          }
          onJobProcessed={[Function]}>
          <div>
            In progress...
          </div>
        </Foo>
      </FooWithJob>
    </FooWithJobWithJobID>
  </ClientProvider>
</ServerProvider>
`;

exports[`runJobs() should render a job that fails 1`] = `
<ServerProvider
  runJobsExecContext={
    Object {
      "getState": [Function],
      "registerJobState": [Function],
    }
  }>
  <ClientProvider>
    <FooWithJobWithJobID>
      <FooWithJob
        jobInitState={
          Object {
            "completed": true,
            "error": "Poop!",
            "inProgress": false,
            "result": undefined,
          }
        }
        onJobProcessed={[Function]}>
        <Foo
          job={
            Object {
              "completed": true,
              "error": "Poop!",
              "inProgress": false,
              "result": undefined,
            }
          }
          jobInitState={
            Object {
              "completed": true,
              "error": "Poop!",
              "inProgress": false,
              "result": undefined,
            }
          }
          onJobProcessed={[Function]}>
          <div>
            Error: 
            Poop!
          </div>
        </Foo>
      </FooWithJob>
    </FooWithJobWithJobID>
  </ClientProvider>
</ServerProvider>
`;

exports[`runJobs() should render a job that succeeds 1`] = `
<ServerProvider
  runJobsExecContext={
    Object {
      "getState": [Function],
      "registerJobState": [Function],
    }
  }>
  <ClientProvider>
    <FooWithJobWithJobID>
      <FooWithJob
        jobInitState={
          Object {
            "completed": true,
            "error": undefined,
            "inProgress": false,
            "result": "Hello world!",
          }
        }
        onJobProcessed={[Function]}>
        <Foo
          job={
            Object {
              "completed": true,
              "error": undefined,
              "inProgress": false,
              "result": "Hello world!",
            }
          }
          jobInitState={
            Object {
              "completed": true,
              "error": undefined,
              "inProgress": false,
              "result": "Hello world!",
            }
          }
          onJobProcessed={[Function]}>
          <div>
            Hello world!
          </div>
        </Foo>
      </FooWithJob>
    </FooWithJobWithJobID>
  </ClientProvider>
</ServerProvider>
`;
